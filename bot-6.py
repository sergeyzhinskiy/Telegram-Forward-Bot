import asyncio
import logging
import os
import re
import sys
from telethon import TelegramClient, events, Button
from telethon.sessions import StringSession
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
from dotenv import load_dotenv

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SOURCES_FILE = 'sources.txt'
TARGETS_FILE = 'targets.txt'
SIGNATURE_FILE = 'signature.txt'
ADMIN_ID = 6385514050  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')
SESSION_STRING = os.getenv('SESSION_STRING')

if not all([API_ID, API_HASH, BOT_TOKEN, SESSION_STRING]):
    logger.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")
    raise ValueError("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_signature():
    try:
        with open(SIGNATURE_FILE, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except:
        return "–•–æ—á–µ—à—å —Ç–∞–∫–æ–π –∂–µ –±–æ—Ç? –û–±—Ä–∞—â–∞–π—Å—è - @Russkayamednayakompaniya"

def save_signature(text):
    with open(SIGNATURE_FILE, 'w', encoding='utf-8') as f:
        f.write(text)

def load_list(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return [line.strip() for line in f.readlines() if line.strip()]
    except:
        return []

def save_list(items, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        for item in items:
            f.write(f"{item}\n")

def clean_text(text):
    return re.sub(r'http\S+|t\.me\S+|@\S+', '', text).strip() if text else ""

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
class ForwardBot:
    def __init__(self):
        self.client = TelegramClient(
            StringSession(SESSION_STRING),
            int(API_ID),
            API_HASH
        )
        self.bot = None
        self.sources = load_list(SOURCES_FILE)
        self.targets = load_list(TARGETS_FILE)
        self.signature = load_signature()
        
    async def start(self):
        await self.client.start(bot_token=BOT_TOKEN)
        self.bot = await self.client.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{self.bot.username}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.client.add_event_handler(
            self.handle_admin_command,
            events.NewMessage(pattern=r'^/start$', from_users=[ADMIN_ID])
        )
        self.client.add_event_handler(
            self.handle_new_message,
            events.NewMessage(chats=self.sources)
        )
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self.client.run_until_disconnected()
    
    async def handle_admin_command(self, event):
        command = event.message.message.strip()
        
        if command == '/start':
            await self.show_main_menu(event)
            
        elif command == '/add_source':
            await event.respond("–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞-–¥–æ–Ω–æ—Ä–∞:")
            self.next_handler = self.add_source_handler
            
        elif command == '/add_target':
            await event.respond("–í–≤–µ–¥–∏—Ç–µ @username —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞:")
            self.next_handler = self.add_target_handler
            
        elif command == '/set_signature':
            await event.respond(f"–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å—å: {self.signature}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å:")
            self.next_handler = self.set_signature_handler
            
        elif command == '/check_status':
            await self.check_status(event)
    
    async def handle_next_message(self, event):
        if hasattr(self, 'next_handler'):
            await self.next_handler(event)
            delattr(self, 'next_handler')
    
    async def add_source_handler(self, event):
        source = event.message.message.strip()
        if not source.startswith('@'):
            source = f"@{source}"
            
        if source in self.sources:
            await event.respond("‚ö†Ô∏è –≠—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            self.sources.append(source)
            save_list(self.sources, SOURCES_FILE)
            await event.respond(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
        await self.show_main_menu(event)
    
    async def add_target_handler(self, event):
        target = event.message.message.strip()
        if not target.startswith('@'):
            target = f"@{target}"
            
        if target in self.targets:
            await event.respond("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            self.targets.append(target)
            save_list(self.targets, TARGETS_FILE)
            await event.respond(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {target}")
        await self.show_main_menu(event)
    
    async def set_signature_handler(self, event):
        self.signature = event.message.message.strip()
        save_signature(self.signature)
        await event.respond(f"‚úÖ –ü–æ–¥–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å: {self.signature}")
        await self.show_main_menu(event)
    
    async def check_status(self, event):
        status = (
            f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.sources)}\n"
            f"üìå –ü—Ä–∏–µ–º–Ω–∏–∫–æ–≤: {len(self.targets)}\n"
            f"‚úèÔ∏è –ü–æ–¥–ø–∏—Å—å: {self.signature}\n\n"
            f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
        )
        await event.respond(status)
    
    async def show_main_menu(self, event):
        buttons = [
            [Button.inline("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–æ—Ä–∞", b"add_source")],
            [Button.inline("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", b"add_target")],
            [Button.inline("‚öôÔ∏è –ü–æ–¥–ø–∏—Å—å", b"set_signature")],
            [Button.inline("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", b"check_status")]
        ]
        text = (
            "ü§ñ –ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.sources)}\n"
            f"üìå –ü—Ä–∏–µ–º–Ω–∏–∫–æ–≤: {len(self.targets)}\n"
            f"‚úèÔ∏è –ü–æ–¥–ø–∏—Å—å: {self.signature}"
        )
        await event.respond(text, buttons=buttons)
    
    async def handle_callback(self, event):
        data = event.data.decode('utf-8')
        
        if data == 'add_source':
            await event.respond("–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞-–¥–æ–Ω–æ—Ä–∞:")
            self.next_handler = self.add_source_handler
            
        elif data == 'add_target':
            await event.respond("–í–≤–µ–¥–∏—Ç–µ @username —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞:")
            self.next_handler = self.add_target_handler
            
        elif data == 'set_signature':
            await event.respond(f"–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å—å: {self.signature}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å:")
            self.next_handler = self.set_signature_handler
            
        elif data == 'check_status':
            await self.check_status(event)
    
    async def handle_new_message(self, event):
        if not self.targets:
            return
            
        text = clean_text(event.message.text)
        final_text = f"{text}\n\n{self.signature}" if text else self.signature
        
        if event.message.media:
            for target in self.targets:
                try:
                    await event.client.send_file(
                        target,
                        event.message.media,
                        caption=final_text
                    )
                    logger.info(f"–ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ {target}: {e}")
        else:
            for target in self.targets:
                try:
                    await event.client.send_message(
                        target,
                        final_text
                    )
                    logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {target}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ {target}: {e}")

if __name__ == '__main__':
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≤ Telegram
    ADMIN_ID = 6385514050  # –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID
    
    bot = ForwardBot()
    loop = asyncio.get_event_loop()
    
    try:
        loop.run_until_complete(bot.start())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        sys.exit(0)